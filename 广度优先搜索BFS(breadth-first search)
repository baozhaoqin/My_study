参考：
作者：Krahets
链接：https://leetcode.cn/leetbook/read/illustration-of-algorithm/lhy9nj/
来源：力扣（LeetCode）

Leetcode LCR 149.彩灯装饰记录 I
二叉树的广度优先搜索，其通常借助 队列 的先入先出特性来实现。
Python 中使用 collections 中的双端队列 deque() ，其 popleft() 方法可达到 𝑂(1)O(1) 时间复杂度；列表 list 的 pop(0) 方法时间复杂度为 𝑂(𝑁) 。

import collections
class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def decorateRecord(self, root: TreeNode):
        # 特殊化处理空树的情况
        if not root: return []
        # 初始化结果列表和队列
        res, queue = [], collections.deque()
        # 将根节点加入队列，这是为了接下来广度优先搜索（BFS）的实现，while循环会持续到队列为空为止
        queue.append(root)
        # 开始广度优先搜索（BFS）
        while queue:
            # 从队列中取出一个节点，这是BFS的核心步骤之一
            node = queue.popleft()
            # 将当前节点的值添加到结果列表中，这是BFS的另一个核心步骤之一
            res.append(node.val)
            # 如果当前节点有左子节点，则将左子节点加入队列中
            if node.left: queue.append(node.left)
            # 如果当前节点有右子节点，则将右子节点加入队列中
            if node.right: queue.append(node.right)
        return res
