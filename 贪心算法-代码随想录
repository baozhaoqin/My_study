1.贪心算法的理论基础
*局部最优推出全局最优*
贪心无套路，总是东一下西一下
如果找到局部最优，然后推出整体最优，那么就是贪心（如果感觉好像局部最优可以推出全局最优，然后想不到反例，那就试一试贪心吧！）
2.分发饼干（455）
本题解法：先发大饼干满足大胃口的小孩
class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        # 先排序
        g = sorted(g)
        s = sorted(s)
        count = 0
        # 定义最大的饼干索引
        index = len(s) - 1
        # 遍历胃口,从最大的胃口开始
        for i in range(len(g)-1,-1,-1):
            # 找到适合胃口的饼干
            # 注意这里使用的是if语句
            if index >= 0 and s[index] >= g[i]:
                count += 1
                index -= 1
        return count
3.摆动序列
有三种情况需要考虑
（1）上下有平坡
（2）首尾元素
（3）单调有平坡，就是要么前后差值一直为正数或者负数。
class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        # 特殊情况处理
        if len(nums) == 1 : return 1
        # 初始化
        prediff = 0
        curdiff = 0
        # 结果集，初始化为1是考虑到了最后一个点也是作为摆动的
        result = 1
        # 循环，减一是由于结果集已经将最后一个点作为了摆动，所以不必到达最后一个点了
        for i in range(len(nums)-1):
            curdiff = nums[i+1] - nums[i]
            if prediff >= 0 and curdiff < 0 or prediff <= 0 and curdiff >0:
                result += 1
                # 更新前差值，在这里更新是为了适应摆动的时候，才更新前差值
                prediff = curdiff 
        return result
4.最大子序和
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # 定义存储最大连续和的res变量
        res = float('-inf')  # 初始化结果为负无穷大
        # 定义连续和
        count = 0
        # 循环
        for i in range(len(nums)):
            # 连续和
            count += nums[i]
            # 更新最大连续和
            if count > res : res = count
            # 如果连续和是负数，则可以选择下一个数作为连续和的起点
            # 这里连续和等于零，其实也可以作为下一个数作为连续和的起点（只不过数组元素会增加）
            # 这里直接定义连续和为0，因为下一次循环的时候就会加上下一个数作为起点了
            if count < 0 : count = 0
            # if count <= 0 : count = 0
        return res
5.买卖股票的最佳时机 II
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 定义收集正收益的结果集
        res = 0
        # 遍历，这里索引从1开始，是为了能够计算出收益
        for i in range(1,len(prices)):
            # 如果是正收益则加入到结果集
            # 这里用到了与0相比取最大值的方法来确认正数
            res += max(prices[i]-prices[i-1],0)
        return res
6.跳跃游戏
class Solution:
    def canJump(self, nums: List[int]) -> bool:        
        # 定义覆盖范围
        cover = 0
        # 特殊情况处理
        if len(nums) == 1: return True
        i = 0
        # python不支持动态修改for循环中变量,使用while循环代替
        while i <= cover:
            # 这一步是选择最大的覆盖范围
            cover = max(i + nums[i], cover)
            if cover >= len(nums) - 1: return True
            i += 1
        return False
7.跳跃游戏 II
贪心解法有点难理解（先欠着）
好抽象呀，二刷还是看不懂。
8.K次取反后最大化的数组和
class Solution:
    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:
        # 特殊情况处理
        if len(nums) == 1:
            return nums[0]

        # 先将这个数组转变成绝对值大的在右边
        new_list = sorted(nums, key=abs)
        new_list = new_list[::-1]

        # 循环遍历数组遇到负数就转变成正数
        for i in range(len(new_list)):
            if new_list[i] < 0 and k != 0:
                new_list[i] = abs(new_list[i])
                k -= 1
        
        # 转变完成后k还剩余的话，就判断k为奇数还是偶数
        # 是偶数的话就不用动，是奇数的话就将其值改变成负数
        if k % 2 != 0 :
            # 改变的是最小的数
            new_list[-1] *= -1
        
        sum = 0
        # 依次取出元素并相加
        for i in new_list:
            sum += i
        
        return sum
9.加油站
解题的思路是非常妙，要注意一下剩余的油耗
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        # 贪心算法
        curSum = 0
        totalSum = 0
        start = 0
        for i in range(len(gas)):
            # 计算当前的油量
            curSum += gas[i] - cost[i]
            # 保存剩余油量（主要是这一步处理的好，这个贪心算法才能完成任务）
            # 这一步会统计要消耗的所有油量
            totalSum += gas[i] - cost[i]
            # 这一步也处理的好
            # 如果当前的油量为负数的话
            if curSum < 0:
                curSum = 0
                start = i+1
        if totalSum < 0 :
            return -1
        return start
10.分发糖果
这一题的“贪”在那呢？
class Solution:
    def candy(self, ratings: List[int]) -> int:
        candy = [1] * len(ratings)
        # 比较右边孩子与左边孩子
        for i in range(1,len(ratings)):
            if ratings[i] > ratings[i-1]:
                candy[i] = candy[i-1] + 1
        # 比较左边孩子与右边孩子
        for j in range(len(ratings)-2,-1,-1):
            if ratings[j] > ratings[j+1]:
                # 这一步非常关键，既满足了上面的条件也满足了下边的条件
                candy[j] = max(candy[j+1]+1, candy[j])
        return sum(candy)
11.柠檬水找零
这一题是比较容易理解的，就是根据题目给的形式一步一步的来就可以了
class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        # 贪心
        fiveDollar = 0
        tenDollar = 0
        for bill in bills:
            if bill == 5 : fiveDollar += 1
            elif bill == 10 :
                if fiveDollar >0 :
                    fiveDollar -= 1
                    tenDollar += 1
                else:
                    return False
            elif bill == 20 :
                if fiveDollar > 0 and tenDollar > 0:
                    fiveDollar -= 1
                    tenDollar -= 1
                elif fiveDollar >= 3:
                    fiveDollar -= 3
                else:
                    return False
        return True
12.根据身高重建队列
要注意两边分别考虑
重点是怎么将这个二维数组按照其中之一的元素进行排序
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        # 先按照h维度的身高顺序从高到低排序。确定第一个维度
        # lambda返回的是一个元组：当-x[0](维度h）相同时，再根据x[1]（维度k）从小到大排序
        people.sort(key=lambda x: (-x[0], x[1]))
        que = []
	
	    # 根据每个元素的第二个维度k，贪心算法，进行插入
        # people已经排序过了：同一高度时k值小的排前面。
        for p in people:
            que.insert(p[1], p)
        return que
13.用最少数量的箭引爆气球
最好画个图来理解一下
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        # 特殊情况处理
        if len(points) == 0 : return 0
        # 将数组进行排序
        points = sorted(points, key=lambda x:x[0])
        # 注意这里弓箭总数的初始化是1
        res = 1
        for i in range(1,len(points)):
            # 使用后边元素的左边界与前边元素的右边界进行比较
            if points[i][0] > points[i-1][1]:
                res += 1
            # 不满足上边情况的话，就更新当前元素的最小右边界
            else:
                points[i][1] = min(points[i][1],points[i-1][1])
        return res
14.无重叠区间
class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        # 特殊情况处理
        if len(intervals) == 1 : return 0
        # 将数组先进行排序，按照左区间大小排序
        intervals = sorted(intervals, key=lambda x : x[0])
        # 初始化为0，虽然是从1索引开始，但是要统计的是删除区间数量
        res = 0
        for i in range(1,len(intervals)):
            # 如果此区间的左边界大于等于上一区间的右边界，则说明无重叠
            if intervals[i][0] >= intervals[i-1][1]:
                pass
            # 否则的话就说明是重叠的区间了
            else:
                res += 1
                intervals[i][1] = min(intervals[i][1],intervals[i-1][1])
        return res
15.划分字母区间
不理解就画个图，此题重点是怎么求出每个字母最后出现的位置
class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        last_occurrence = {}  # 存储每个字符最后出现的位置
        for i, ch in enumerate(s):
            last_occurrence[ch] = i

        result = []
        start = 0
        end = 0
        for i, ch in enumerate(s):
            end = max(end, last_occurrence[ch])  # 找到当前字符出现的最远位置
            if i == end:  # 如果当前位置是最远位置，表示可以分割出一个区间
                result.append(end - start + 1)
                start = i + 1

        return result
16.合并区间
本题比较妙的是，合并区间的操作，可以画图来理解
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        # 特殊情况处理
        if len(intervals) == 0 : return [] 
        # 按照左边界先排序
        intervals = sorted(intervals,key=lambda x : x[0])
        # 定义结果数组
        res = [intervals[0]]
        for i in range(1,len(intervals)):
            # 如果当前区间的左区间小于等于上一区间的右区间，则合并数组
            if intervals[i][0] <= res[-1][1]:
                # 注意这里是合并最大的右区间
                res[-1][1] = max(res[-1][1],intervals[i][1])
            else:
                res.append(intervals[i]) 
        return res
17.单调递增的数字
注意一下python的字符串是不可变类型
class Solution:
    def monotoneIncreasingDigits(self, n: int) -> int:
        # 将整数转换为字符串
        strNum = str(n)
        # flag用来标记赋值9从哪里开始
        # 设置为字符串长度，为了防止第二个for循环在flag没有被赋值的情况下执行
        flag = len(strNum)
        
        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                flag = i  # 更新flag的值，记录需要修改的位置
                # 将前一个字符减1，以保证递增性质
                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]
        
        # 将flag位置及之后的字符都修改为9，以保证最大的递增数字
        for i in range(flag, len(strNum)):
            strNum = strNum[:i] + '9' + strNum[i + 1:]
        
        # 将最终的字符串转换回整数并返回
        return int(strNum)
18.监控二叉树
难（先放过）
19.贪心算法-总结
没啥规律，比较像常识，只要局部最优能够推出全局最优，那就可以'贪心'。

