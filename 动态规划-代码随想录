1.理论基础
五部曲
dp数组以及下标的含义
递推公式
dp数组如何初始化
遍历顺序
打印dp数组
2.斐波那契数
class Solution:
    def fib(self, n: int) -> int:
        if n == 0:
            return 0
        if n == 1:
            return 1
        dp = [0] * n
        dp[0],dp[1] = 1,1
        for i in range(2,len(dp)):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n-1]
3.爬楼梯
难点怎么推出递推公式
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 1:
            return n
        # 这样子初始化才是有意义的
        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2
        
        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]
        
        return dp[n]
4.使用最小花费爬楼梯
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        dp = [0] * (len(cost) + 1)
        dp[0] = 0  # 初始值，表示从起点开始不需要花费体力
        dp[1] = 0  # 初始值，表示经过第一步不需要花费体力
        
        for i in range(2, len(cost) + 1):
            # 在第i步，可以选择从前一步（i-1）花费体力到达当前步，或者从前两步（i-2）花费体力到达当前步
            # 选择其中花费体力较小的路径，加上当前步的花费，更新dp数组
            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])
        
        return dp[len(cost)]  # 返回到达楼顶的最小花费
5.不同路径
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # dp数组含义，到达时有多少条路径
        dp = [[0] * n for _ in range(m)]
        # 递推公式
        # dp[i][j] = dp[i-1][j] + dp[i][j-1]
        # 如何初始化，将第一行与第一列都设为1，因为题意要求只可走左或下
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1
        # 遍历顺序，从左往右，从上往下
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        
        return dp[m-1][n-1]
6.不同路径 II
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        # 特殊情况处理，要么起点有障碍物要么终点有
        if obstacleGrid[m-1][n-1] == 1 or obstacleGrid[-1][-1] == 1 : return 0
        # dp数组含义，到达时有多少条路径
        dp = [[0] * n for _ in range(m)]
        # 递推公式
        # dp[i][j] = dp[i-1][j] + dp[i][j-1]
        # 如何初始化，将第一行与第一列都设为1，因为题意要求只可走左或下
        for i in range(m):
            # 增加判断障碍物的条件
            if obstacleGrid[i][0] == 0:
                dp[i][0] = 1
            else : break
        for j in range(n):
            # 增加判断障碍物的条件
            if obstacleGrid[0][j] == 0:
                dp[0][j] = 1
            else : break
        # 遍历顺序，从左往右，从上往下
        for i in range(1,m):
            for j in range(1,n):
                # 增加判断障碍物的条件
                if obstacleGrid[i][j] == 1:
                    continue
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]     
7.整数拆分

8.不同的二叉搜索树

9.01背包理论基础
理解dp数组的含义
递推公式的推导
10.01背包理论基础（滚动数组）
注意一下遍历顺序
11.分割等和子集
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        # 思路：能够找到加起来等于总和一半的数或者数的总和就说明可以分割
        # 一维DP
        total_sum = sum(nums)
        if total_sum % 2 != 0:
            return False
        target_sum = total_sum // 2
        # DP数组的含义
        dp = [False] * (target_sum + 1)
        # 初始化
        dp[0] = True
        # 遍历顺序，从后往前
        for num in nums:
            # 从target_sum逆序迭代到num，步长为-1
            for i in range(target_sum, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]
        return dp[target_sum]
12.最后一块石头的重量II
class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        dp = [0] * 15001
        total_sum = sum(stones)
        target = total_sum // 2

        for stone in stones:  # 遍历物品
            for j in range(target, stone - 1, -1):  # 遍历背包
                dp[j] = max(dp[j], dp[j - stone] + stone)

        return total_sum - dp[target] - dp[target]
13.目标和
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        total_sum = sum(nums)  # 计算nums的总和
        if abs(target) > total_sum:
            return 0  # 此时没有方案
        if (target + total_sum) % 2 == 1:
            return 0  # 此时没有方案
        target_sum = (target + total_sum) // 2  # 目标和
        dp = [0] * (target_sum + 1)  # 创建动态规划数组，初始化为0
        dp[0] = 1  # 当目标和为0时，只有一种方案，即什么都不选
        for num in nums:
            for j in range(target_sum, num - 1, -1):
                dp[j] += dp[j - num]  # 状态转移方程，累加不同选择方式的数量
        return dp[target_sum]  # 返回达到目标和的方案数
14.零一和
15.完全背包理论基础
def knapsack(n, bag_weight, weight, value):
    # 这里的n其实是有多少个物品的意思，从0开始，如n=2，就是0,1,2三个物品
    # 画个图就可以理解这里dp数组的意思了
    dp = [[0] * (bag_weight + 1) for _ in range(n)]

    # 初始化
    # 这里也是画个图就可以理解了，遍历物品第一行初始化嘛
    for j in range(weight[0], bag_weight + 1):
        # 这里是递推公式，可由前边已知数据推导来
        dp[0][j] = dp[0][j - weight[0]] + value[0]

    # 动态规划
    # 先遍历物品，再遍历背包
    for i in range(1, n):
        for j in range(bag_weight + 1):
            # 这里判断此次物品的重量能否放下，放不下的话就取上边
            if j < weight[i]:
                dp[i][j] = dp[i - 1][j]
            # 放的下的话根据左上方与上方的比较得出最大值
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - weight[i]] + value[i])
    # 最优解
    return dp[n - 1][bag_weight]
16.零钱兑换II
class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        # dp数组的含义
        # 数组定义
        dp = [0] * (target+1)
        dp[0] = 1
        for i in range(1,target+1):       # 遍历背包
            for j in range(len(nums)):    # 遍历物品
                # 递推公式
                if i - nums[j] >= 0:
                    dp[i] += dp[i-nums[j]]
        return dp[target]
17.爬楼梯（进阶版）
def climbing_stairs(n,m):
    dp = [0]*(n+1) # 背包总容量
    dp[0] = 1 
    # 排列题，注意循环顺序，背包在外物品在内
    for j in range(1,n+1):
        for i in range(1,m+1):
            if j>=i:
                dp[j] += dp[j-i] # 这里i就是重量而非index
    return dp[n]

if __name__ == '__main__':
    n,m = list(map(int,input().split(' ')))
    print(climbing_stairs(n,m))
18.零钱兑换
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)  # 创建动态规划数组，初始值为正无穷大
        dp[0] = 0  # 初始化背包容量为0时的最小硬币数量为0

        for coin in coins:  # 遍历硬币列表，相当于遍历物品
            for i in range(coin, amount + 1):  # 遍历背包容量
                if dp[i - coin] != float('inf'):  # 如果dp[i - coin]不是初始值，则进行状态转移
                    dp[i] = min(dp[i - coin] + 1, dp[i])  # 更新最小硬币数量

        if dp[amount] == float('inf'):  # 如果最终背包容量的最小硬币数量仍为正无穷大，表示无解
            return -1
        return dp[amount]  # 返回背包容量为amount时的最小硬币数量
19.完全平方数
class Solution:
    def numSquares(self, n: int) -> int:
        dp = [float('inf')] * (n + 1)
        dp[0] = 0

        for i in range(1, n + 1):  # 遍历背包
            for j in range(1, int(i ** 0.5) + 1):  # 遍历物品
                # 更新凑成数字 i 所需的最少完全平方数数量
                dp[i] = min(dp[i], dp[i - j * j] + 1)

        return dp[n]
20.单词拆分

21.打家劫舍
class Solution:
    def rob(self, nums: List[int]) -> int:
        # 特殊情况处理
        if len(nums) == 1 : return nums[0]
        # dp数组含义
        # 下标：i考虑偷该物品，dp[i]偷的最大值
        # 定义
        dp = [0] * len(nums)
        # 递推公式
        # dp[i] = max(dp[i-1],dp[i-2]+nums[i])
        # 初始化
        dp[0] = nums[0]
        # 这一步挺关键的，可以处理数组只有2个元素的特殊情况
        dp[1] = max(nums[0],nums[1])
        # 遍历顺序
        for i in range(2,len(nums)):
            dp[i] = max(dp[i-1],dp[i-2]+nums[i])
            print(dp[i])

        return dp[len(nums)-1]
22.打家劫舍II
class Solution:
    def rob(self, nums: List[int]) -> int:
        # 特殊情况处理
        if len(nums) == 1: return nums[0]
        # 包含头元素的数组
        firstValue = self.rob01(nums[0:len(nums)-1])
        secondeValue = self.rob01(nums[1:len(nums)])
        return max(firstValue,secondeValue)

    def rob01(self, nums) -> int:
        # 特殊情况处理
        if len(nums) == 1: return nums[0]
        # dp数组含义
        # 下标：i考虑偷该物品，dp[i]偷的最大值
        # 定义
        dp = [0] * len(nums)
        # 递推公式
        # dp[i] = max(dp[i-1],dp[i-2]+nums[i])
        # 初始化
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])
        # 遍历顺序
        for i in range(2, len(nums)):
            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
            print(dp[i])

        return dp[len(nums) - 1]
23.打家劫舍 III
class Solution:
    def rob(self, root: Optional[TreeNode]) -> int:
        # 递归加动态规划
        result = self.robtree(root)
        return max(result[0],result[1])

    def robtree(self, node):
        if node == None:
            return [0,0]
        # 后序遍历
        leftdp = self.robtree(node.left)
        rightdp = self.robtree(node.right)
        # 偷当前房屋
        val1 = node.val + leftdp[0] + rightdp[0]
        # 不偷
        val2 = max(leftdp[0],leftdp[1]) + max(rightdp[0],rightdp[1])
        return [val2,val1]
24.买卖股票的最佳时机I
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        length = len(prices)
        if length == 0:
            return 0
        # 数组定义
        dp = [[0] * 2 for _ in range(length)]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        for i in range(1, length):
            dp[i][0] = max(dp[i-1][0], -prices[i])
            dp[i][1] = max(dp[i-1][1], prices[i] + dp[i-1][0])
        return dp[-1][1]
25.买卖股票的最佳时机II
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        length = len(prices)
        if length == 0:
            return 0
        # 数组定义
        dp = [[0] * 2 for _ in range(length)]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        for i in range(1, length):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i])
            dp[i][1] = max(dp[i-1][1], prices[i] + dp[i-1][0])
        return dp[-1][1]
26.买卖股票的最佳时机III
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # dp数组的定义
        dp = [ [0]*5 for _ in range(len(prices))]

        # 递推公式
        # 初始化
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[0][2] = 0
        dp[0][3] = -prices[0]
        dp[0][4] = 0

        # 遍历顺序
        for i in range(1,len(prices)):
            dp[i][0] = dp[i-1][0]
            dp[i][1] = max(dp[i-1][1],dp[i-1][0]-prices[i])
            dp[i][2] = max(dp[i-1][2],dp[i-1][1]+prices[i])
            dp[i][3] = max(dp[i-1][3],dp[i-1][2]-prices[i])
            dp[i][4] = max(dp[i-1][4],dp[i-1][3]+prices[i])

        return dp[len(prices)-1][4]
27.买卖股票的最佳时机IV
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        # dp数组的定义
        dp = [[0]*((2*k)+1) for _ in range(len(prices))]

        # 递推公式
        # 初始化
        for i in range(1,2*k,2):
            dp[0][i] = -prices[0]


        for i in range(1,len(prices)):
            for j in range(0,2*k,2):
                dp[i][j+1] = max(dp[i-1][j+1],dp[i-1][j]-prices[i])
                dp[i][j+2] = max(dp[i-1][j+2],dp[i-1][j+1]+prices[i])
        
        return dp[len(prices)-1][2*k]
28.最佳买卖股票时机含冷冻期
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # dp数组的定义
        # 四种状态
        # dp  = [ [0]*4 for _ in range(len(prices))]

        # 递推公式
        # 初始化
        # dp[0][0] = -prices[0]
        # dp[0][1] = 0
        # dp[0][2] = 0
        # dp[0][3] = 0

        # 遍历顺序
        # for i in range(1,len(prices)):
            # dp[i][0] = max(dp[i-1][0],dp[i-1][3],dp[i-1][1]-prices[i])
            # dp[i][1] = max(dp[i-1][1],dp[i-1][3])
            # dp[i][2] = dp[i-1][0] + prices[i]
            # dp[i][3] = dp[i-1][2]

        # return max(dp[-1][1],dp[-1][2],dp[-1][3])

        n = len(prices)
        if n == 0:
            return 0
        dp = [[0] * 4 for _ in range(n)]  # 创建动态规划数组，4个状态分别表示持有股票、不持有股票且处于冷冻期、不持有股票且不处于冷冻期、不持有股票且当天卖出后处于冷冻期
        dp[0][0] = -prices[0]  # 初始状态：第一天持有股票的最大利润为买入股票的价格
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][3], dp[i-1][1]) - prices[i])  # 当前持有股票的最大利润等于前一天持有股票的最大利润或者前一天不持有股票且不处于冷冻期的最大利润减去当前股票的价格
            dp[i][1] = max(dp[i-1][1], dp[i-1][3])  # 当前不持有股票且处于冷冻期的最大利润等于前一天持有股票的最大利润加上当前股票的价格
            dp[i][2] = dp[i-1][0] + prices[i]  # 当前不持有股票且不处于冷冻期的最大利润等于前一天不持有股票的最大利润或者前一天处于冷冻期的最大利润
            dp[i][3] = dp[i-1][2]  # 当前不持有股票且当天卖出后处于冷冻期的最大利润等于前一天不持有股票且不处于冷冻期的最大利润
        return max(dp[n-1][3], dp[n-1][1], dp[n-1][2])  # 返回最后一天不持有股票的最大利润
29.买卖股票的最佳时机含手续费
class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        length = len(prices)
        if length == 0:
            return 0
        # 数组定义
        dp = [[0] * 2 for _ in range(length)]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        for i in range(1, length):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i])
            dp[i][1] = max(dp[i-1][1], prices[i] + dp[i-1][0]-fee)
        return dp[-1][1]
30.最长递增子序列
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        # dp数组定义
        dp = [1] * len(nums)
        # 递推公式
        # 初始化
        # 遍历顺序
        for i in range(1,len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[j]+1,dp[i])
        
        return max(dp)
31.最长连续递增序列
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        lenght = len(nums)
        dp = [1] * lenght
        for i in range(1,lenght):
            if nums[i] > nums[i-1]:
                dp[i] = dp[i-1] + 1
        return max(dp)
32.最长重复子数组
class Solution:
    def findLength(self, nums1: List[int], nums2: List[int]) -> int:
        if len(nums1) == 0 and len(nums2) == 0:
            return 0
        length1 = len(nums1) # i
        length2 = len(nums2) # j

        dp = [ [0] * (length2+1) for _ in range(len(nums1)+1) ]

        result = 0
        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if nums1[i-1] == nums2[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1
                if dp[i][j] > result:
                    result = dp[i][j]
        return result
33.最长公共子序列
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        if len(text1) == 0 and len(text2) == 0:
            return 0
        length1 = len(text1)
        length2 = len(text2)

        dp = [ [0] * (length2+1) for _ in range(length1+1) ]

        result = 0
        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if text1[i-1] == text2[j-1] :
                    dp[i][j] = dp[i-1][j-1]+1
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])

                if dp[i][j] > result:
                    result = dp[i][j]
        
        return result
34.不相交的线
class Solution:
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        # 最长公共子序列系列
        if len(nums1) == 0 and len(nums2) == 0:
            return 0
        length1 = len(nums1)
        length2 = len(nums2)

        dp = [ [0] * (length2+1) for _ in range(length1+1) ]

        result = 0
        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if nums1[i-1] == nums2[j-1] :
                    dp[i][j] = dp[i-1][j-1]+1
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])

                if dp[i][j] > result:
                    result = dp[i][j]
        
        return result
35.最大子序和
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # 动态规划
        if len(nums) == 0:
            return 0

        length = len(nums)

        dp = [0] * length

        dp[0] = nums[0]
        for i in range(1,length):
            dp[i] = max(dp[i-1]+nums[i],nums[i])
        
        return max(dp)
36.判断子序列
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        length1 = len(s)
        length2 = len(t)
        if length1 == 0 and length2 == 0:
            return True

        dp = [ [0] * (length2+1) for _ in range(length1+1)]

        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = dp[i][j-1]
        
        if dp[-1][-1] == length1:
            return True
        else:
            return False
37.不同的子序列
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        # dp数组的定义
        length1 = len(s)
        length2 = len(t)
        if length1 == 0 and length2 == 0 : return 0

        dp = [ [0] * (length2+1) for _ in range(length1+1)]
        for i in range(len(s)):
            dp[i][0] = 1

        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j]
            
        return dp[-1][-1]
38.两个字符串的删除操作
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        length1 = len(word1)
        length2 = len(word2)
        if length1 == 0 and length2 == 0 : return 0

        dp = [ [0]*(length2+1) for _ in range(length1+1)]
        for i in range(length1+1):
            dp[i][0] = i
        for j in range(length2+1):
            dp[0][j] = j

        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i-1][j-1]+2,dp[i-1][j]+1,dp[i][j-1]+1)

        return dp[-1][-1]
39.编辑距离
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        length1 = len(word1)
        length2 = len(word2)
        if length1 == 0 and length2 == 0 : return 0

        dp = [[0]*(length2+1) for _ in range(length1+1)]

        for i in range(length1+1):
            dp[i][0] = i
        for j in range(length2+1):
            dp[0][j] = j

        for i in range(1,length1+1):
            for j in range(1,length2+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+1)
