1.每日温度
class Solution:
    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:
        stack = [0]
        res = [0] * len(temperatures)

        for i in range(1,len(temperatures)):
            if temperatures[i] <= temperatures[stack[-1]]:
                stack.append(i)
            else:
                while len(stack) != 0 and temperatures[i] > temperatures[stack[-1]]:
                    res[stack[-1]] = i - stack[-1]
                    stack.pop()
                stack.append(i)
        return res
2.下一个更大元素 I
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        stack = [0]
        result = [-1] * len(nums1)
        # map_num = {}
        # for i in range(len(nums1)):
            # map_num[nums1[i]] = i
        for i in range(1,len(nums2)):
            if nums2[i] <= nums2[stack[-1]]:
                stack.append(i)
            else:
                while len(stack) != 0 and nums2[i] > nums2[stack[-1]]:
                    # 判断是否在里面
                    if nums2[stack[-1]] in nums1:
                        index = nums1.index(nums2[stack[-1]])
                        result[index] = nums2[i]
                    stack.pop()
                stack.append(i)
        return result
3.下一个更大元素II
class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        stack = [0]
        res = [-1] * len(nums)

        for i in range(1,len(nums)*2):
            i = i % len(nums)
            if nums[i] <= nums[stack[-1]]:
                stack.append(i)
            else:
                while len(stack) != 0 and nums[i] > nums[stack[-1]]:
                    res[stack[-1]] = nums[i]
                    stack.pop()
                stack.append(i)
        return res
4.接雨水
class Solution:
    def trap(self, height: List[int]) -> int:
        stack = [0]
        sum = 0
        for i in range(1,len(height)):
            if height[i] < height[stack[-1]]:
                stack.append(i)
            elif height[i] == height[stack[-1]]:
                stack.pop()
                stack.append(i)
            else:
                while len(stack) != 0 and height[i] > height[stack[-1]]:
                    mid = height[stack[-1]]
                    stack.pop()
                    if len(stack) != 0 :
                        h = min(height[i],height[stack[-1]]) - mid
                        w = i - stack[-1] - 1 
                        sum += (h*w)
                stack.append(i)
        return sum

        # # 单调栈
        # '''
        # 单调栈是按照 行 的方向来计算雨水
        # 从栈顶到栈底的顺序：从小到大
        # 通过三个元素来接水：栈顶，栈顶的下一个元素，以及即将入栈的元素
        # 雨水高度是 min(凹槽左边高度, 凹槽右边高度) - 凹槽底部高度
        # 雨水的宽度是 凹槽右边的下标 - 凹槽左边的下标 - 1（因为只求中间宽度）
        # '''
        # # stack储存index，用于计算对应的柱子高度
        # stack = [0]
        # result = 0
        # for i in range(1, len(height)):
        #     # 情况一
        #     if height[i] < height[stack[-1]]:
        #         stack.append(i)

        #     # 情况二
        #     # 当当前柱子高度和栈顶一致时，左边的一个是不可能存放雨水的，所以保留右侧新柱子
        #     # 需要使用最右边的柱子来计算宽度
        #     elif height[i] == height[stack[-1]]:
        #         stack.pop()
        #         stack.append(i)

        #     # 情况三
        #     else:
        #         # 抛出所有较低的柱子
        #         while stack and height[i] > height[stack[-1]]:
        #             # 栈顶就是中间的柱子：储水槽，就是凹槽的地步
        #             mid_height = height[stack[-1]]
        #             stack.pop()
        #             if stack:
        #                 right_height = height[i]
        #                 left_height = height[stack[-1]]
        #                 # 两侧的较矮一方的高度 - 凹槽底部高度
        #                 h = min(right_height, left_height) - mid_height
        #                 # 凹槽右侧下标 - 凹槽左侧下标 - 1: 只求中间宽度
        #                 w = i - stack[-1] - 1
        #                 # 体积：高乘宽
        #                 result += h * w
        #         stack.append(i)
        # return result
5.柱状图中最大的矩形
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        heights.insert(0, 0)  # 在开头添加零
        heights.append(0)     # 在末尾添加零
        stack = [0]
        res = 0

        for i in range(1,len(heights)):
            if heights[i] > heights[stack[-1]]:
                stack.append(i)
            elif heights[i] == heights[stack[-1]]:
                stack.pop()
                stack.append(i)
            else:
                while stack and heights[i] < heights[stack[-1]]:
                    mid = stack[-1]
                    stack.pop()
                    if stack:
                        left = stack[-1]
                        right = i
                        w = right - left -1
                        h = heights[mid]
                        res = max(h*w,res)
                stack.append(i)
        return res
