参考来源：
https://www.showmeai.tech/article-detail/172
1.大数据与数据库
  1.1从Hadoop到数据库
  大家知道在计算机领域，关系数据库大量用于数据存储和维护的场景。大数据的出现后，很多公司转而选择像 Hadoop/Spark 的大数据解决方案。
  Hadoop使用分布式文件系统，用于存储大数据，并使用MapReduce来处理。Hadoop擅长于存储各种格式的庞大的数据，任意的格式甚至非结构化的处理。
  1.2Hadoop的限制
  Hadoop非常适合批量处理任务，但它只以顺序方式访问数据。这意味着如果要查询，必须搜索整个数据集，即使是最简单的搜索工作。（线性处理？）
  当处理结果在另一个庞大的数据集，也是按顺序处理一个巨大的数据集。在这一点上，一个新的解决方案，需要访问数据中的任何点（随机访问）单元。
  1.3HBase与大数据数据库
  HBase是建立在Hadoop文件系统之上的分布式面向列的数据库。
  HBase是一个数据模型，类似于谷歌的Bigtable设计，可以提供快速随机访问海量结构化数据。它利用了Hadoop的文件系统（HDFS）提供的容错能力。
  它是Hadoop的生态系统，提供对数据的随机实时读/写访问，是Hadoop文件系统的一部分。我们可以直接或通过HBase的存储HDFS数据。使用HBase在HDFS读取消费/随机访问数据。 HBase在Hadoop的文件系统之上，并提供了读写访问。
  （所以说为了能够实现随机访问，出现了HBase？）
2.BigTable与HBase
  要提到HBase，就要顺带提到google的Bigtable。HBase是在谷歌BigTable的基础之上进行开源实现的，是一个高可靠、高性能、面向列、可伸缩的分布式数据库，可以用来存储非结构化和半结构化的稀疏数据。
  2.1结构化数据和非结构化数据
  BigTable和HBase存储的都是非结构化数据。
  2.2BigTable简介
  BigTable是一个用于管理结构化数据的分布式存储系统，构建在GFS、Chubby、SSTable等google技术之上。本质上说，BigTable是一个稀疏的、分布式的、持久化的、多维的、排序的键值（key-value）映射。
  2.3HBase简介
  HBase是一个高可靠、高性能、面向列、可伸缩的分布式数据库，是谷歌BigTable的开源实现。
  HBase主要用来存储非结构化和半结构化的松散数据，目标是处理非常庞大的表，可以通过水平扩展的方式，利用廉价计算机集群处理由超过10亿行数据和数百万列元素组成的数据表。
  2.4HBase在大数据生态环境中的位置
  它建立在Hadoop HDFS之上的分布式面向列的数据库。
  2.5HBase的特点
  HBase有以下特点：
  （1）大：一个表可以有上亿行，上百万列。
  （2）面向列：面向列表(簇)的存储和权限控制，列(簇)独立检索。
  （3）稀疏：对于为空(NULL)的列，并不占用存储空间，因此，表可以设计的非常稀疏。
  （4）无模式：每一行都有一个可以排序的主键和任意多的列，列可以根据需要动态增加，同一张表中不同的行可以有截然不同的列。
  （5）数据多版本：每个单元的数据有多个版本，默认情况下，版本号是单元格插入时的时间戳。
  （6）数据类型单一：HBase中的数据都是字符串，没有类型。
  2.6HBase的访问接口
  待更新
3.HBase数据模型
  3.1逻辑存储模型
  HBase中需要根据行键、列族、列限定符和时间戳来确定一个单元格。因此，可以视为一个“四维坐标”，即 [行键, 列族, 列限定符, 时间戳] 。
  3.2物理存储模型
  Table在行的方向上分割为多个Region，每个Region分散在不同的RegionServer中。
  每个HRegion由多个Store构成，每个Store由一个MemStore和0或多个StoreFile组成，每个Store保存一个Columns Family。StoreFile以HFile格式存储在HDFS中。
4.HBase系统架构
  4.1HBase架构组件
  HBase包含以下三个组件：
    Region Server：提供数据的读写服务，当客户端访问数据时，直接和Region Server通信。
    HBase Master：Region的分配，DDL操作(创建表，删除表)。
    ZooKeeper：是HDFS的一部分，维护一个活跃的集群状态。
  4.2Region组件
  HBase Tables 通过行健的范围(row key range)被水平切分成多个Region。一个Region包含了所有的在Region开始键(startKey)和结束键(endKey)之内的行。
  Regions被分配到集群的节点上，成为Region Servers，提供数据的读写服务；一个Region Server可以服务1000个Region。
  4.3HMaster组件
  分配Region，DDL操作(创建表， 删除表)。
  协调各个Reion Server：在启动时分配Region、在恢复或是负载均衡时重新分配Region；监控所有集群当中的Region Server实例，从ZooKeeper中监听通知。
  提供创建、删除、更新表的接口。
  4.4ZooKeeper组件
  HBase使用ZooKeeper作为分布式协调服务，来维护集群中的Server状态。
  ZooKeeper维护着哪些Server是活跃或是可用的，提供Server 失败时的通知。
  Zookeeper使用一致性机制来保证公共的共享状态，注意，需要使用奇数的三台或五台机器，保证一致。
5.Hive介绍
  5.1Hive简介
  Hive是基于Hadoop的一个数据仓库工具，用于结构化数据的查询、分析和汇总。Hive提供类SQL查询功能，它将SQL转换为MapReduce程序。
  5.2Hive在大数据生态环境中的位置
  待更新
  5.3Hive特点
  Hive的优点
  （1）简单容易上手：提供了类SQL查询语言HQL。
  （2）可扩展：一般情况下不需要重启服务Hive可以自由的扩展集群的规模。
  （3）提供统一的元数据管理。
  （4）延展性：Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。
  （5）容错：良好的容错性，节点出现问题SQL仍可完成执行。
  Hive的缺点(局限性)
  （1）Hive的HQL表达能力有限：迭代式算法无法表达，比如pagerank；数据挖掘方面，比如kmeans。
  （2）Hive的效率比较低：Hive自动生成的MapReduce作业，不够智能化；Hive调优比较困难，粒度较粗；Hive可控性差。
  5.4Hive与传统数据库对比
  待更新
  5.5Hive的体系架构
  client 三种访问方式：CLI、JDBC/ODBC、WEBUI。
  Meta store 元数据：表名、表所属数据库、表拥有者、列、分区字段、表类型、表数据所在的目录等，默认存储在自带的derby数据库中。
  Driver：解析器、编译器、优化器、执行器。
  5.6Hive中的数据模型
  Hive 中所有的数据都存储在 HDFS 中Hive 中包含以下数据模型：
  表(Table)
  外部表(External Table)
  分区(Partition)
  桶(Bucket)
  
  
  
