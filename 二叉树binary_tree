1.树的遍历
  1.1二叉树的前序遍历
    1.1.1递归法
    class TreeNode(object):
      def __init__(self, val=0, left=None, right=None):
          self.val = val
          self.left = left
          self.right = right
    class Solution(object):
        def preorderTraversal(self, root):
            # 定义一个列表存储遍历结果
            self.result = []
            self.traversal(root)
            return self.result
        def traversal(self, node):
            # 终止条件
            if not node : return
            # 前序遍历：根节点 -> 左子树 -> 右子树
            self.result.append(node.val)
            self.traversal(node.left)
            self.traversal(node.right)
  1.2二叉树的中序遍历
    1.2.1递归法
    class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    class Solution(object):
        def inorderTraversal(self, root):
            # 定义一个列表来存放遍历的结果
            self.result = []
            self.tarversal(root)
            return self.result
        # 递归函数
        def traversal(self, node):
            if not node:return
            # 中序遍历 ：左-根-右
            self.tarversal(node.left)
            self.result.append(node.val)
            self.tarversal(node.right)
  1.3二叉树的后序遍历
    1.3.1递归法
    class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    class Solution(object):
        def postorderTraversal(self, root):
            # 定义一个结果列表
            self.result = []
            self.traversal(root)
            return self.result
        # 递归函数
        def traversal(self, node):
            # 递归终止条件
            if node is None:return 
            # 后序遍历：左->右->根
            self.traversal(node.left)
            self.traversal(node.right)
            self.result.append(node.val)
  1.4二叉树的层序遍历
    1.4.1迭代法（利用了队列的先进先出特性）
    class TreeNode(object):
        def __init__(self, val=0, left=None, right=None):
            self.val = val
            self.left = left
            self.right = right
    class Solution(object):
        def levelOrder(self, root):
            # 特殊处理
            if not root:return []
            # 初始化队列与结果列表，这里要注意的是队列的初始化要先加入根节点
            res,queue=[],[root]
            # 遍历队列，直到队列为空
            while queue:
                # 初始化临时列表，用于存储当前层的节点值
                tmp = []
                # 遍历当前层的所有节点
                for _ in range(len(queue)):
                    # 弹出队列中的第一个元素，赋值给变量node
                    node=queue.pop(0)
                    # 将当前节点的值添加到结果列表中
                    tmp.append(node.val)
                    # 如果当前节点有左子节点，将左子节点添加到队列中
                    if node.left:
                        queue.append(node.left)
                    # 如果当前节点有右子节点，将右子节点添加到队列中
                    if node.right:
                        queue.append(node.right)
                res.append(tmp)
            return res
2.运用递归解决问题
  2.1二叉树的最大深度
    2.1.1自底向上解法，后序遍历
    解决这道问题前，要先理解什么是深度，什么是高度。
    关键所在：根节点的高度就是这颗二叉树的最大深度
    class TreeNode(object):
      def __init__(self, val=0, left=None, right=None):
          self.val = val
          self.left = left
          self.right = right
    class Solution(object):
        def maxDepth(self, root):
            # 自底向上的解法，后序遍历
            return self.isHeight(root)
        def isHeight(self, node):
            # 递归终止条件，同时也是空节点的高度0
            if not node : return 0
            # 递归求解左右子树的高度，取最大值加1作为当前节点的高度
            left_height = self.isHeight(node.left)
            right_height = self.isHeight(node.right)
            # 当前节点的高度，加一是下一层的高度返回后，当前层的高度就要加一，才是当前节点的真实高度
            height = 1 + max(left_height, right_height)
            return height
  2.2对称二叉树
    2.2.1递归法
    这一道题的关键在于用左子结点与右子结点来比较是否相等
    class TreeNode:
        def __init__(self, val=0, left=None, right=None):
            self.val = val
            self.left = left
            self.right = right
    class Solution:
        def isSymmetric(self, root):
            # 特殊值处理
            if not root:
                return True
            return self.compare(root.left, root.right)
        # 递归法
        def compare(self, right, left):
            # 如果左右子树都为空，返回True
            if left == None and right == None:
                return True
            # 如果左右子树只有一个为空，返回False
            elif left == None and right != None:
                return False
            elif left != None and right == None:
                return False
            # 如果左右子树的根节点值不相等，返回False
            elif left.val != right.val:
                return False
            # 递归比较子树
            # 这里是比较的是left.right和right.left
            outside = self.compare(left.left, right.right)
            # 这里是比较的是left.left和right.right
            inside = self.compare(left.right, right.left)
            # 左右子树都对称，返回True
            # 否则返回False
            isSame = outside and inside
            return isSame
  2.3路径总和
3.总结
  3.1从中序与后序遍历序列构造二叉树
  这一道题主要是理解了怎么通过中序与后序遍历来构造二叉树就好办了，注意根节点的索引是可以作为分界点的
  class TreeNode(object):
      def __init__(self, val=0, left=None, right=None):
          self.val = val
          self.left = left
          self.right = right
  class Solution:
      def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
          # 步骤
          # 1.如果后序遍历为空的话，就可以直接返回空列表
          # 2.通过后序遍历最后一个元素，找到根节点
          # 3.通过中序遍历找到根节点在中序遍历中的位置，作为分界点
          # 4.切中序数组
          # 5.切后序数组
          # 6.递归构造左右子树
          
          # # 1.如果后序遍历为空的话，就可以直接返回空列表
          # if not postorder : return []
  
          # 第一步: 特殊情况讨论: 树为空. (递归终止条件)
          if not postorder : return None
          
          # # 2.通过后序遍历最后一个元素，找到根节点
          # root = TreeNode(postorder[-1])
  
          # 第二步: 后序遍历的最后一个就是当前的中间节点.
          root_val = postorder[-1]
          root = TreeNode(root_val)
  
          # # 3.通过中序遍历找到根节点在中序遍历中的位置，作为分界点
          # separate_index = inorder.index(root.val)
  
          # 第三步: 找切割点.
          separator_idx = inorder.index(root_val)
  
          # # 4.切中序数组
          # inorder_left = inorder[:separator_idx]
          # inorder_right = inorder[separator_idx+1:]
  
          # 第四步: 切割inorder数组. 得到inorder数组的左,右半边.
          inorder_left = inorder[:separator_idx]
          inorder_right = inorder[separator_idx + 1:]
          
          # # 5.切后序数组
          # # 因为左子树的长度是相等的
          # postorder_left = postorder[:len(inorder_left)]
          # postorder_right = postorder[len(inorder_left):len(postorder)-1]
  
          # 第五步: 切割postorder数组. 得到postorder数组的左,右半边.
          # ⭐️ 重点1: 中序数组大小一定跟后序数组大小是相同的.
          postorder_left = postorder[:len(inorder_left)]
          postorder_right = postorder[len(inorder_left): len(postorder) - 1]
          
          # # 6.递归构造左右子树
          # root.left = self.buildTree(inorder_left, postorder_left)
          # root.right = self.buildTree(inorder_right, postorder_right)
          # return root
  
          # 第六步: 递归
          root.left = self.buildTree(inorder_left, postorder_left)
          root.right = self.buildTree(inorder_right, postorder_right)
          # 第七步: 返回答案
          return root
  3.2从前序与中序遍历序列构造二叉树
  注意一下根节点怎么取到，还有就是切割数组的时候要切记遍历的顺序，理解顺序也就懂得怎么去切割数组了
  class TreeNode:
      def __init__(self, val=0, left=None, right=None):
          self.val = val
          self.left = left
          self.right = right
  class Solution:
      def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
          # 步骤
          # 1.如果前序遍历为空的话，就可以直接返回空
          # 2.通过前序遍历最后一个元素，找到根节点
          # 3.通过中序遍历找到根节点在中序遍历中的位置，作为分界点
          # 4.切中序数组
          # 5.切前序数组
          # 6.递归构造左右子树
      
          # 1.如果前序遍历为空的话，就可以直接返回空
          if not preorder: return None
          
          # 2.通过前序遍历第一个元素，找到根节点
          root_val = preorder[0]
          root = TreeNode(root_val)
          
          # 3.通过中序遍历找到根节点在中序遍历中的位置，作为分界点
          separator_idx = inorder.index(root_val)
          
          # 4.切中序数组
          inorder_left = inorder[:separator_idx]
          inorder_right = inorder[separator_idx + 1:]
          
          # 5.切前序数组
          # ⭐️ 重点1: 中序数组大小一定跟前序数组大小是相同的.
          preorder_left = preorder[1:1+len(inorder_left)]
          preorder_right = preorder[1+len(inorder_left):]
          
          # 6.递归构造左右子树
          root.left = self.buildTree(preorder_left, inorder_left)
          root.right = self.buildTree(preorder_right, inorder_right)
          
          # 返回根节点
          return root
  3.3填充每个节点的下一个右侧节点指针
        
