参考来源:
https://www.showmeai.tech/article-detail/168
1.Hadoop快速入门
  1.1Hadoop简介
  Hadoop是Apache软件基金会旗下的一个开源分布式计算平台
  (1)Hadoop是基于Java语言开发的，具有很好的跨平台特性，并且可以部署在廉价的计算机集群中；
  (2)Hadoop的核心是分布式文件系统HDFS（Hadoop Distributed File System）和MapReduce；
  (3)Hadoop被公认为行业大数据标准开源软件，在分布式环境下提供了海量数据的处理能力；
  1.2.Hadoop发展简史
  待更新
2.Hadoop特性与应用现状
  2.1Hadoop特性
  Hadoop是一个能够对大量数据进行分布式处理的软件框架（重点，hadoop是一个框架！）并且是以一种可靠、高效、可伸缩的方式进行处理的。
  2.2Hadoop应用现状
  Hadoop凭借其突出的优势，已经在各个领域得到了广泛的应用，而互联网领域是其应用的主阵地。
  2.3Hadoop版本演进
  Apache Hadoop版本分为两代：第一代Hadoop称为Hadoop 1.0，第二代Hadoop称为Hadoop 2.0。
3.Hadoop生态项目架构
  待更新
4.HDFS介绍
  4.1分布式文件系统
  分布式文件系统，把文件分布存储到多个计算机节点上，成千上万的计算机节点构成计算机集群。与之前使用多个处理器和专用高级硬件的并行化处理装置不同的是，目前的分布式文件系统所采用的计算机集群，都是由普通硬件构成的，这就大大降低了硬件上的开销。（所以从这里看出它的成本低）
  4.2HDFS的优点与局限
  总体而言，HDFS要实现以下目标：
    兼容廉价的硬件设备
    流数据读写（？什么是流数据呢）
    大数据集
    简单的文件模型
    强大的跨平台兼容性
  HDFS特殊的设计，在实现上述优良特性的同时，也使得自身具有一些应用局限性，主要包括以下几个方面：
    不适合低延迟数据访问
    无法高效存储大量小文件
    不支持多用户写入及任意修改文件（这个重点，不能修改吗？）
  4.3HDFS块及其优势
  块（Block）：HDFS默认一个块64MB，一个文件被分成多个块，以块作为存储单位。块的大小远远大于普通文件系统，可以最小化寻址开销。
  HDFS采用抽象的块概念可以带来以下几个明显的好处：
  (1)支持大规模文件存储：文件以块为单位进行存储，一个大规模文件可以被分拆成若干个文件块，不同的文件块可以被分发到不同的节点上，因此，一个文件的大小不会受到单个节点的存储容量的限制，可以远远大于网络中任意节点的存储容量。（我觉得这后边的一句话其实说明了，即使你的文件再大，也架不住我的计算机多呀，所以可以存的下）
  (2)简化系统设计：首先，大大简化了存储管理，因为文件块大小是固定的，这样就可以很容易计算出一个节点可以存储多少文件块；其次，方便了元数据的管理，元数据不需要和文件块一起存储，可以由其他系统负责管理元数据。
  (3)适合数据备份：每个文件块都可以冗余存储到多个节点上，大大提高了系统的容错性和可用性。（我感觉正是采用了块这种存储模式，方便了冗余存储）
  4.4HDFS主要组件的功能
  HDFS包含Name Node和Data Node
  Name Node:
  (1)存储元数据 （提问：元数据是什么？）
  (2)元数据保存在内存中
  (3)保存文件、block、datanode之间的映射关系
  Data Node:
  (1)存储文件内容
  (2)文件内容保存在磁盘
  (3)维护了 block id 到 datanode 本地文件的映射关系
  提问：所以组装块成一个完整的文件是Name Node来干的吗
5.Map-Reduce分布式数据处理
  HDFS很好地解决了分布式文件存储的问题，而hadoop利用一套Map-Reduce的计算框架，也解决了大数据处理的难题。（原来Map-Reduce它也是一种框架捏）
  下面整理了大数据计算所面对的问题，以及一些解决思路（也是map-reduce的核心思想）。
  5.1集群计算面对的问题&方案
  问题1：节点故障。如何保持数据的持续性，即在某些节点故障的情形下不影响依旧能够使用数据？在运行时间较长的集群运算中，如何应对节点故障呢？
  解决方法：在多节点上冗余地存储数据。分布式文件存储系统提供全局的文件命名空间，冗余度和可获取性。例如：Google的GFS、Hadoop的HDFS。（所以就是多冗余的方法吗）
  问题2：网络带宽瓶颈。
  解决方法：数据以“块状”形式在多台机器上存储。每个数据块都会重复地在多台机器上存储，保证数据的持续性和随时可取性。（这不也是冗余的方法吗？）
  问题3：分布式编程非常复杂。需要一个简单的模型能够隐去所有的复杂性。
  解决方法：简单的程序模型隐藏所有的复杂度。
  
  
  
