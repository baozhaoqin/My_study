1.
逻辑运算符
逻辑异或：^ ，相同为false，不同为true

2.短路逻辑运算符
短路与：&&
短语或：||
（与逻辑运算符效果相同，只不过有短路效果）
简单理解：当左边的表达式能确定最终的结果，那么右边就不会参与运行了

3.三元运算符
格式：关系表达式? 表达式1: 表达式2;
计算规则
- 首先计算关系表达式的值
- 如果值为true，表达式1的值就是运算结果
- 如果值为false，表达式2的值就是运算结果

4.运算符的优先级
（）优先于所有

5.分支语句switch
switch语句格式

switch(表达式) {
    case 值1:
        语句体1;
        break;
    case 值2:
        语句体2;
        break;
    ...
    default:
        语句体n+1;
        break;
}

执行流程：
I. 首先计算表达式的值。
II. 依次和case后面的值进行比较，如果有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。
III. 如果所有的case后面的值和表达式的值都不匹配，就会执行default里面的语句体，然后结束整个switch语句。

格式说明：
I. 表达式：（将要匹配的值）取值为byte、short、int、char。
JDK5以后可以是枚举，JDK7以后可以是String。
II. case：后面跟的是要和表达式进行比较的值（被匹配的值）。
III. break：表示中断，结束的意思，用来结束switch语句。
IV. default：表示所有情况都不匹配的时候，就执行该处的内容，
和if语句的else相似。
V. case后面的值只能是字面量，不能是变量
VI. case给出的值不允许重复

6.switch其他知识点
    6.1default的位置和省略
    1. 位置 ：default不一定是写在最下面的，我们可以写在任意位置。只不过习惯会写在最下面
    2. 省略 ：default可以省略，语法不会有问题，但是不建议省略。
    6.2case穿透
    就是语句体中没有写break导致的。
    执行流程：
        首先还是会拿着小括号中表达式的值跟下面每一个case进行匹配。
        如果匹配上了，就会执行对应的语句体，如果此时发现了break，那么结束整个switch语句。
        如果没有发现break，那么程序会继续执行下一个case的语句体，一直遇到break或者右大括号为止。
    使用场景：
        如果多个case的语句体重复了，那么我们考虑利用case穿透去简化代码。
    6.3switch新特性
    JDK12
    int number = 10;
    switch (number){
        case 1 -> System.out.println("一");
        case 2 -> System.out.println("二");
        case 3 -> System.out.println("三");
        default -> System.out.println("没有这种选项");
    }
    6.4switch和if第三种格式各自的使用场景
    if的第三种格式：一般用于对范围的判断
    switch：把有限个数据一一列举出来，让我们任选其一




